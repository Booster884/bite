#[derive(Debug, PartialEq, Eq, Clone, Copy)]
pub struct X86InstructionsLookup {
    pub mnemomic: &'static str,
    pub desc: &'static str,
}

impl X86InstructionsLookup {
    pub fn get(width: usize, opcode: u8) -> Self {
        match width {
            1 => X86_SINGLE[opcode as usize],
            _ => todo!(),
        }
    }
}

#[rustfmt::skip]
const X86_SINGLE: &[X86InstructionsLookup] = &[
    X86InstructionsLookup { mnemomic: "add", desc: "Add" },
    X86InstructionsLookup { mnemomic: "add", desc: "Add" },
    X86InstructionsLookup { mnemomic: "add", desc: "Add" },
    X86InstructionsLookup { mnemomic: "add", desc: "Add" },
    X86InstructionsLookup { mnemomic: "add", desc: "Add" },
    X86InstructionsLookup { mnemomic: "add", desc: "Add" },
    X86InstructionsLookup { mnemomic: "push", desc: "Push Word, Doubleword or Quadword Onto the Stack" },
    X86InstructionsLookup { mnemomic: "pop", desc: "Pop a Value from the Stack" },
    X86InstructionsLookup { mnemomic: "or", desc: "Logical Inclusive OR" },
    X86InstructionsLookup { mnemomic: "or", desc: "Logical Inclusive OR" },
    X86InstructionsLookup { mnemomic: "or", desc: "Logical Inclusive OR" },
    X86InstructionsLookup { mnemomic: "or", desc: "Logical Inclusive OR" },
    X86InstructionsLookup { mnemomic: "or", desc: "Logical Inclusive OR" },
    X86InstructionsLookup { mnemomic: "or", desc: "Logical Inclusive OR" },
    X86InstructionsLookup { mnemomic: "push", desc: "Push Word, Doubleword or Quadword Onto the Stack" },
    X86InstructionsLookup { mnemomic: "", desc: "" },
    X86InstructionsLookup { mnemomic: "adc", desc: "Add with Carry" },
    X86InstructionsLookup { mnemomic: "adc", desc: "Add with Carry" },
    X86InstructionsLookup { mnemomic: "adc", desc: "Add with Carry" },
    X86InstructionsLookup { mnemomic: "adc", desc: "Add with Carry" },
    X86InstructionsLookup { mnemomic: "adc", desc: "Add with Carry" },
    X86InstructionsLookup { mnemomic: "adc", desc: "Add with Carry" },
    X86InstructionsLookup { mnemomic: "push", desc: "Push Word, Doubleword or Quadword Onto the Stack" },
    X86InstructionsLookup { mnemomic: "pop", desc: "Pop a Value from the Stack" },
    X86InstructionsLookup { mnemomic: "sbb", desc: "Integer Subtraction with Borrow" },
    X86InstructionsLookup { mnemomic: "sbb", desc: "Integer Subtraction with Borrow" },
    X86InstructionsLookup { mnemomic: "sbb", desc: "Integer Subtraction with Borrow" },
    X86InstructionsLookup { mnemomic: "sbb", desc: "Integer Subtraction with Borrow" },
    X86InstructionsLookup { mnemomic: "sbb", desc: "Integer Subtraction with Borrow" },
    X86InstructionsLookup { mnemomic: "sbb", desc: "Integer Subtraction with Borrow" },
    X86InstructionsLookup { mnemomic: "push", desc: "Push Word, Doubleword or Quadword Onto the Stack" },
    X86InstructionsLookup { mnemomic: "pop", desc: "Pop a Value from the Stack" },
    X86InstructionsLookup { mnemomic: "and", desc: "Logical AND" },
    X86InstructionsLookup { mnemomic: "and", desc: "Logical AND" },
    X86InstructionsLookup { mnemomic: "and", desc: "Logical AND" },
    X86InstructionsLookup { mnemomic: "and", desc: "Logical AND" },
    X86InstructionsLookup { mnemomic: "and", desc: "Logical AND" },
    X86InstructionsLookup { mnemomic: "and", desc: "Logical AND" },
    X86InstructionsLookup { mnemomic: "es", desc: "ES segment override prefix" },
    X86InstructionsLookup { mnemomic: "daa", desc: "Decimal Adjust AL after Addition" },
    X86InstructionsLookup { mnemomic: "sub", desc: "Subtract" },
    X86InstructionsLookup { mnemomic: "sub", desc: "Subtract" },
    X86InstructionsLookup { mnemomic: "sub", desc: "Subtract" },
    X86InstructionsLookup { mnemomic: "sub", desc: "Subtract" },
    X86InstructionsLookup { mnemomic: "sub", desc: "Subtract" },
    X86InstructionsLookup { mnemomic: "sub", desc: "Subtract" },
    X86InstructionsLookup { mnemomic: "cs", desc: "CS segment override prefix" },
    X86InstructionsLookup { mnemomic: "das", desc: "Decimal Adjust AL after Subtraction" },
    X86InstructionsLookup { mnemomic: "xor", desc: "Logical Exclusive OR" },
    X86InstructionsLookup { mnemomic: "xor", desc: "Logical Exclusive OR" },
    X86InstructionsLookup { mnemomic: "xor", desc: "Logical Exclusive OR" },
    X86InstructionsLookup { mnemomic: "xor", desc: "Logical Exclusive OR" },
    X86InstructionsLookup { mnemomic: "xor", desc: "Logical Exclusive OR" },
    X86InstructionsLookup { mnemomic: "xor", desc: "Logical Exclusive OR" },
    X86InstructionsLookup { mnemomic: "ss", desc: "SS segment override prefix" },
    X86InstructionsLookup { mnemomic: "aaa", desc: "ASCII Adjust After Addition" },
    X86InstructionsLookup { mnemomic: "cmp", desc: "Compare Two Operands" },
    X86InstructionsLookup { mnemomic: "cmp", desc: "Compare Two Operands" },
    X86InstructionsLookup { mnemomic: "cmp", desc: "Compare Two Operands" },
    X86InstructionsLookup { mnemomic: "cmp", desc: "Compare Two Operands" },
    X86InstructionsLookup { mnemomic: "cmp", desc: "Compare Two Operands" },
    X86InstructionsLookup { mnemomic: "cmp", desc: "Compare Two Operands" },
    X86InstructionsLookup { mnemomic: "ds", desc: "DS segment override prefix" },
    X86InstructionsLookup { mnemomic: "aas", desc: "ASCII Adjust AL After Subtraction" },
    X86InstructionsLookup { mnemomic: "inc", desc: "Increment by 1" },
    X86InstructionsLookup { mnemomic: "dec", desc: "Decrement by 1" },
    X86InstructionsLookup { mnemomic: "push", desc: "Push Word, Doubleword or Quadword Onto the Stack" },
    X86InstructionsLookup { mnemomic: "pop", desc: "Pop a Value from the Stack" },
    X86InstructionsLookup { mnemomic: "pusha", desc: "Push All General-Purpose Registers" },
    X86InstructionsLookup { mnemomic: "pushad", desc: "Push All General-Purpose Registers" },
    X86InstructionsLookup { mnemomic: "popa", desc: "Pop All General-Purpose Registers" },
    X86InstructionsLookup { mnemomic: "popad", desc: "Pop All General-Purpose Registers" },
    X86InstructionsLookup { mnemomic: "bound", desc: "Check Array Index Against Bounds" },
    X86InstructionsLookup { mnemomic: "arpl", desc: "Adjust RPL Field of Segment Selector" },
    X86InstructionsLookup { mnemomic: "fs", desc: "FS segment override prefix" },
    X86InstructionsLookup { mnemomic: "gs", desc: "GS segment override prefix" },
    X86InstructionsLookup { mnemomic: "", desc: "Operand-size override prefix" },
    X86InstructionsLookup { mnemomic: "", desc: "Precision-size override prefix" },
    X86InstructionsLookup { mnemomic: "", desc: "Address-size override prefix" },
    X86InstructionsLookup { mnemomic: "push", desc: "Push Word, Doubleword or Quadword Onto the Stack" },
    X86InstructionsLookup { mnemomic: "imul", desc: "Signed Multiply" },
    X86InstructionsLookup { mnemomic: "push", desc: "Push Word, Doubleword or Quadword Onto the Stack" },
    X86InstructionsLookup { mnemomic: "imul", desc: "Signed Multiply" },
    X86InstructionsLookup { mnemomic: "ins", desc: "Input from Port to String" },
    X86InstructionsLookup { mnemomic: "insb", desc: "Input from Port to String" },
    X86InstructionsLookup { mnemomic: "ins", desc: "Input from Port to String" },
    X86InstructionsLookup { mnemomic: "insw", desc: "Input from Port to String" },
    X86InstructionsLookup { mnemomic: "ins", desc: "Input from Port to String" },
    X86InstructionsLookup { mnemomic: "insd", desc: "Input from Port to String" },
    X86InstructionsLookup { mnemomic: "outs", desc: "Output String to Port" },
    X86InstructionsLookup { mnemomic: "outsb", desc: "Output String to Port" },
    X86InstructionsLookup { mnemomic: "outs", desc: "Output String to Port" },
    X86InstructionsLookup { mnemomic: "outsw", desc: "Output String to Port" },
    X86InstructionsLookup { mnemomic: "outs", desc: "Output String to Port" },
    X86InstructionsLookup { mnemomic: "outsd", desc: "Output String to Port" },
    X86InstructionsLookup { mnemomic: "jo", desc: "Jump short if overflow (OF=1)" },
    X86InstructionsLookup { mnemomic: "jno", desc: "Jump short if not overflow (OF=0)" },
    X86InstructionsLookup { mnemomic: "jb", desc: "Jump short if below/not above or equal/carry (CF=1)" },
    X86InstructionsLookup { mnemomic: "jnae", desc: "Jump short if below/not above or equal/carry (CF=1)" },
    X86InstructionsLookup { mnemomic: "jc", desc: "Jump short if below/not above or equal/carry (CF=1)" },
    X86InstructionsLookup { mnemomic: "jnb", desc: "Jump short if not below/above or equal/not carry (CF=0)" },
    X86InstructionsLookup { mnemomic: "jae", desc: "Jump short if not below/above or equal/not carry (CF=0)" },
    X86InstructionsLookup { mnemomic: "jnc", desc: "Jump short if not below/above or equal/not carry (CF=0)" },
    X86InstructionsLookup { mnemomic: "jz", desc: "Jump short if zero/equal (ZF=1)" },
    X86InstructionsLookup { mnemomic: "je", desc: "Jump short if zero/equal (ZF=1)" },
    X86InstructionsLookup { mnemomic: "jnz", desc: "Jump short if not zero/not equal (ZF=0)" },
    X86InstructionsLookup { mnemomic: "jne", desc: "Jump short if not zero/not equal (ZF=0)" },
    X86InstructionsLookup { mnemomic: "jbe", desc: "Jump short if below or equal/not above (CF=1 OR ZF=1)" },
    X86InstructionsLookup { mnemomic: "jna", desc: "Jump short if below or equal/not above (CF=1 OR ZF=1)" },
    X86InstructionsLookup { mnemomic: "jnbe", desc: "Jump short if not below or equal/above (CF=0 AND ZF=0)" },
    X86InstructionsLookup { mnemomic: "ja", desc: "Jump short if not below or equal/above (CF=0 AND ZF=0)" },
    X86InstructionsLookup { mnemomic: "js", desc: "Jump short if sign (SF=1)" },
    X86InstructionsLookup { mnemomic: "jns", desc: "Jump short if not sign (SF=0)" },
    X86InstructionsLookup { mnemomic: "jp", desc: "Jump short if parity/parity even (PF=1)" },
    X86InstructionsLookup { mnemomic: "jpe", desc: "Jump short if parity/parity even (PF=1)" },
    X86InstructionsLookup { mnemomic: "jnp", desc: "Jump short if not parity/parity odd (PF=0)" },
    X86InstructionsLookup { mnemomic: "jpo", desc: "Jump short if not parity/parity odd (PF=0)" },
    X86InstructionsLookup { mnemomic: "jl", desc: "Jump short if less/not greater (SF!=OF)" },
    X86InstructionsLookup { mnemomic: "jnge", desc: "Jump short if less/not greater (SF!=OF)" },
    X86InstructionsLookup { mnemomic: "jnl", desc: "Jump short if not less/greater or equal (SF=OF)" },
    X86InstructionsLookup { mnemomic: "jge", desc: "Jump short if not less/greater or equal (SF=OF)" },
    X86InstructionsLookup { mnemomic: "jle", desc: "Jump short if less or equal/not greater ((ZF=1) OR (SF!=OF))" },
    X86InstructionsLookup { mnemomic: "jng", desc: "Jump short if less or equal/not greater ((ZF=1) OR (SF!=OF))" },
    X86InstructionsLookup { mnemomic: "jnle", desc: "Jump short if not less nor equal/greater ((ZF=0) AND (SF=OF))" },
    X86InstructionsLookup { mnemomic: "jg", desc: "Jump short if not less nor equal/greater ((ZF=0) AND (SF=OF))" },
    X86InstructionsLookup { mnemomic: "add", desc: "Add" },
    X86InstructionsLookup { mnemomic: "or", desc: "Logical Inclusive OR" },
    X86InstructionsLookup { mnemomic: "adc", desc: "Add with Carry" },
    X86InstructionsLookup { mnemomic: "sbb", desc: "Integer Subtraction with Borrow" },
    X86InstructionsLookup { mnemomic: "and", desc: "Logical AND" },
    X86InstructionsLookup { mnemomic: "sub", desc: "Subtract" },
    X86InstructionsLookup { mnemomic: "xor", desc: "Logical Exclusive OR" },
    X86InstructionsLookup { mnemomic: "cmp", desc: "Compare Two Operands" },
    X86InstructionsLookup { mnemomic: "add", desc: "Add" },
    X86InstructionsLookup { mnemomic: "or", desc: "Logical Inclusive OR" },
    X86InstructionsLookup { mnemomic: "adc", desc: "Add with Carry" },
    X86InstructionsLookup { mnemomic: "sbb", desc: "Integer Subtraction with Borrow" },
    X86InstructionsLookup { mnemomic: "and", desc: "Logical AND" },
    X86InstructionsLookup { mnemomic: "sub", desc: "Subtract" },
    X86InstructionsLookup { mnemomic: "xor", desc: "Logical Exclusive OR" },
    X86InstructionsLookup { mnemomic: "cmp", desc: "Compare Two Operands" },
    X86InstructionsLookup { mnemomic: "add", desc: "Add" },
    X86InstructionsLookup { mnemomic: "or", desc: "Logical Inclusive OR" },
    X86InstructionsLookup { mnemomic: "adc", desc: "Add with Carry" },
    X86InstructionsLookup { mnemomic: "sbb", desc: "Integer Subtraction with Borrow" },
    X86InstructionsLookup { mnemomic: "and", desc: "Logical AND" },
    X86InstructionsLookup { mnemomic: "sub", desc: "Subtract" },
    X86InstructionsLookup { mnemomic: "xor", desc: "Logical Exclusive OR" },
    X86InstructionsLookup { mnemomic: "cmp", desc: "Compare Two Operands" },
    X86InstructionsLookup { mnemomic: "add", desc: "Add" },
    X86InstructionsLookup { mnemomic: "or", desc: "Logical Inclusive OR" },
    X86InstructionsLookup { mnemomic: "adc", desc: "Add with Carry" },
    X86InstructionsLookup { mnemomic: "sbb", desc: "Integer Subtraction with Borrow" },
    X86InstructionsLookup { mnemomic: "and", desc: "Logical AND" },
    X86InstructionsLookup { mnemomic: "sub", desc: "Subtract" },
    X86InstructionsLookup { mnemomic: "xor", desc: "Logical Exclusive OR" },
    X86InstructionsLookup { mnemomic: "cmp", desc: "Compare Two Operands" },
    X86InstructionsLookup { mnemomic: "test", desc: "Logical Compare" },
    X86InstructionsLookup { mnemomic: "test", desc: "Logical Compare" },
    X86InstructionsLookup { mnemomic: "xchg", desc: "Exchange Register/Memory with Register" },
    X86InstructionsLookup { mnemomic: "xchg", desc: "Exchange Register/Memory with Register" },
    X86InstructionsLookup { mnemomic: "mov", desc: "Move" },
    X86InstructionsLookup { mnemomic: "mov", desc: "Move" },
    X86InstructionsLookup { mnemomic: "mov", desc: "Move" },
    X86InstructionsLookup { mnemomic: "mov", desc: "Move" },
    X86InstructionsLookup { mnemomic: "mov", desc: "Move" },
    X86InstructionsLookup { mnemomic: "mov", desc: "Move" },
    X86InstructionsLookup { mnemomic: "lea", desc: "Load Effective Address" },
    X86InstructionsLookup { mnemomic: "mov", desc: "Move" },
    X86InstructionsLookup { mnemomic: "pop", desc: "Pop a Value from the Stack" },
    X86InstructionsLookup { mnemomic: "xchg", desc: "Exchange Register/Memory with Register" },
    X86InstructionsLookup { mnemomic: "nop", desc: "No Operation" },
    X86InstructionsLookup { mnemomic: "pause", desc: "Spin Loop Hint" },
    X86InstructionsLookup { mnemomic: "cbw", desc: "Convert Byte to Word" },
    X86InstructionsLookup { mnemomic: "cwde", desc: "Convert Word to Doubleword" },
    X86InstructionsLookup { mnemomic: "cwd", desc: "Convert Word to Doubleword" },
    X86InstructionsLookup { mnemomic: "cdq", desc: "Convert Doubleword to Quadword" },
    X86InstructionsLookup { mnemomic: "callf", desc: "Call Procedure" },
    X86InstructionsLookup { mnemomic: "fwait", desc: "Check pending unmasked floating-point exceptions" },
    X86InstructionsLookup { mnemomic: "wait", desc: "Check pending unmasked floating-point exceptions" },
    X86InstructionsLookup { mnemomic: "", desc: "" },
    X86InstructionsLookup { mnemomic: "pushf", desc: "Push FLAGS Register onto the Stack" },
    X86InstructionsLookup { mnemomic: "pushfd", desc: "Push eFLAGS Register onto the Stack" },
    X86InstructionsLookup { mnemomic: "popf", desc: "Pop Stack into FLAGS Register" },
    X86InstructionsLookup { mnemomic: "popfd", desc: "Pop Stack into eFLAGS Register" },
    X86InstructionsLookup { mnemomic: "sahf", desc: "Store AH into Flags" },
    X86InstructionsLookup { mnemomic: "lahf", desc: "Load Status Flags into AH Register" },
    X86InstructionsLookup { mnemomic: "mov", desc: "Move" },
    X86InstructionsLookup { mnemomic: "mov", desc: "Move" },
    X86InstructionsLookup { mnemomic: "mov", desc: "Move" },
    X86InstructionsLookup { mnemomic: "mov", desc: "Move" },
    X86InstructionsLookup { mnemomic: "movs", desc: "Move Data from String to String" },
    X86InstructionsLookup { mnemomic: "movsb", desc: "Move Data from String to String" },
    X86InstructionsLookup { mnemomic: "movs", desc: "Move Data from String to String" },
    X86InstructionsLookup { mnemomic: "movsw", desc: "Move Data from String to String" },
    X86InstructionsLookup { mnemomic: "movs", desc: "Move Data from String to String" },
    X86InstructionsLookup { mnemomic: "movsd", desc: "Move Data from String to String" },
    X86InstructionsLookup { mnemomic: "cmps", desc: "Compare String Operands" },
    X86InstructionsLookup { mnemomic: "cmpsb", desc: "Compare String Operands" },
    X86InstructionsLookup { mnemomic: "cmps", desc: "Compare String Operands" },
    X86InstructionsLookup { mnemomic: "cmpsw", desc: "Compare String Operands" },
    X86InstructionsLookup { mnemomic: "cmps", desc: "Compare String Operands" },
    X86InstructionsLookup { mnemomic: "cmpsd", desc: "Compare String Operands" },
    X86InstructionsLookup { mnemomic: "test", desc: "Logical Compare" },
    X86InstructionsLookup { mnemomic: "test", desc: "Logical Compare" },
    X86InstructionsLookup { mnemomic: "stos", desc: "Store String" },
    X86InstructionsLookup { mnemomic: "stosb", desc: "Store String" },
    X86InstructionsLookup { mnemomic: "stos", desc: "Store String" },
    X86InstructionsLookup { mnemomic: "stosw", desc: "Store String" },
    X86InstructionsLookup { mnemomic: "stos", desc: "Store String" },
    X86InstructionsLookup { mnemomic: "stosd", desc: "Store String" },
    X86InstructionsLookup { mnemomic: "lods", desc: "Load String" },
    X86InstructionsLookup { mnemomic: "lodsb", desc: "Load String" },
    X86InstructionsLookup { mnemomic: "lods", desc: "Load String" },
    X86InstructionsLookup { mnemomic: "lodsw", desc: "Load String" },
    X86InstructionsLookup { mnemomic: "lods", desc: "Load String" },
    X86InstructionsLookup { mnemomic: "lodsd", desc: "Load String" },
    X86InstructionsLookup { mnemomic: "scas", desc: "Scan String" },
    X86InstructionsLookup { mnemomic: "scasb", desc: "Scan String" },
    X86InstructionsLookup { mnemomic: "scas", desc: "Scan String" },
    X86InstructionsLookup { mnemomic: "scasw", desc: "Scan String" },
    X86InstructionsLookup { mnemomic: "scas", desc: "Scan String" },
    X86InstructionsLookup { mnemomic: "scasd", desc: "Scan String" },
    X86InstructionsLookup { mnemomic: "mov", desc: "Move" },
    X86InstructionsLookup { mnemomic: "mov", desc: "Move" },
    X86InstructionsLookup { mnemomic: "rol", desc: "Rotate" },
    X86InstructionsLookup { mnemomic: "ror", desc: "Rotate" },
    X86InstructionsLookup { mnemomic: "rcl", desc: "Rotate" },
    X86InstructionsLookup { mnemomic: "rcr", desc: "Rotate" },
    X86InstructionsLookup { mnemomic: "shl", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "sal", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "shr", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "sal", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "shl", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "sar", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "rol", desc: "Rotate" },
    X86InstructionsLookup { mnemomic: "ror", desc: "Rotate" },
    X86InstructionsLookup { mnemomic: "rcl", desc: "Rotate" },
    X86InstructionsLookup { mnemomic: "rcr", desc: "Rotate" },
    X86InstructionsLookup { mnemomic: "shl", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "sal", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "shr", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "sal", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "shl", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "sar", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "retn", desc: "Return from procedure" },
    X86InstructionsLookup { mnemomic: "retn", desc: "Return from procedure" },
    X86InstructionsLookup { mnemomic: "les", desc: "Load Far Pointer" },
    X86InstructionsLookup { mnemomic: "lds", desc: "Load Far Pointer" },
    X86InstructionsLookup { mnemomic: "mov", desc: "Move" },
    X86InstructionsLookup { mnemomic: "mov", desc: "Move" },
    X86InstructionsLookup { mnemomic: "enter", desc: "Make Stack Frame for Procedure Parameters" },
    X86InstructionsLookup { mnemomic: "leave", desc: "High Level Procedure Exit" },
    X86InstructionsLookup { mnemomic: "retf", desc: "Return from procedure" },
    X86InstructionsLookup { mnemomic: "retf", desc: "Return from procedure" },
    X86InstructionsLookup { mnemomic: "int", desc: "Call to Interrupt Procedure" },
    X86InstructionsLookup { mnemomic: "int", desc: "Call to Interrupt Procedure" },
    X86InstructionsLookup { mnemomic: "into", desc: "Call to Interrupt Procedure" },
    X86InstructionsLookup { mnemomic: "iret", desc: "Interrupt Return" },
    X86InstructionsLookup { mnemomic: "iretd", desc: "Interrupt Return" },
    X86InstructionsLookup { mnemomic: "rol", desc: "Rotate" },
    X86InstructionsLookup { mnemomic: "ror", desc: "Rotate" },
    X86InstructionsLookup { mnemomic: "rcl", desc: "Rotate" },
    X86InstructionsLookup { mnemomic: "rcr", desc: "Rotate" },
    X86InstructionsLookup { mnemomic: "shl", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "sal", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "shr", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "sal", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "shl", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "sar", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "rol", desc: "Rotate" },
    X86InstructionsLookup { mnemomic: "ror", desc: "Rotate" },
    X86InstructionsLookup { mnemomic: "rcl", desc: "Rotate" },
    X86InstructionsLookup { mnemomic: "rcr", desc: "Rotate" },
    X86InstructionsLookup { mnemomic: "shl", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "sal", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "shr", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "sal", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "shl", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "sar", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "rol", desc: "Rotate" },
    X86InstructionsLookup { mnemomic: "ror", desc: "Rotate" },
    X86InstructionsLookup { mnemomic: "rcl", desc: "Rotate" },
    X86InstructionsLookup { mnemomic: "rcr", desc: "Rotate" },
    X86InstructionsLookup { mnemomic: "shl", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "sal", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "shr", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "sal", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "shl", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "sar", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "rol", desc: "Rotate" },
    X86InstructionsLookup { mnemomic: "ror", desc: "Rotate" },
    X86InstructionsLookup { mnemomic: "rcl", desc: "Rotate" },
    X86InstructionsLookup { mnemomic: "rcr", desc: "Rotate" },
    X86InstructionsLookup { mnemomic: "shl", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "sal", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "shr", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "sal", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "shl", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "sar", desc: "Shift" },
    X86InstructionsLookup { mnemomic: "aam", desc: "ASCII Adjust AX After Multiply" },
    X86InstructionsLookup { mnemomic: "amx", desc: "Adjust AX After Multiply" },
    X86InstructionsLookup { mnemomic: "aad", desc: "ASCII Adjust AX Before Division" },
    X86InstructionsLookup { mnemomic: "adx", desc: "Adjust AX Before Division" },
    X86InstructionsLookup { mnemomic: "", desc: "" },
    X86InstructionsLookup { mnemomic: "salc", desc: "Set AL If Carry" },
    X86InstructionsLookup { mnemomic: "setalc", desc: "Set AL If Carry" },
    X86InstructionsLookup { mnemomic: "xlat", desc: "Table Look-up Translation" },
    X86InstructionsLookup { mnemomic: "xlatb", desc: "Table Look-up Translation" },
    X86InstructionsLookup { mnemomic: "fadd", desc: "Add" },
    X86InstructionsLookup { mnemomic: "fadd", desc: "Add" },
    X86InstructionsLookup { mnemomic: "fmul", desc: "Multiply" },
    X86InstructionsLookup { mnemomic: "fmul", desc: "Multiply" },
    X86InstructionsLookup { mnemomic: "fcom", desc: "Compare Real" },
    X86InstructionsLookup { mnemomic: "fcom", desc: "Compare Real" },
    X86InstructionsLookup { mnemomic: "fcomp", desc: "Compare Real and Pop" },
    X86InstructionsLookup { mnemomic: "fcomp", desc: "Compare Real and Pop" },
    X86InstructionsLookup { mnemomic: "fsub", desc: "Subtract" },
    X86InstructionsLookup { mnemomic: "fsub", desc: "Subtract" },
    X86InstructionsLookup { mnemomic: "fsubr", desc: "Reverse Subtract" },
    X86InstructionsLookup { mnemomic: "fsubr", desc: "Reverse Subtract" },
    X86InstructionsLookup { mnemomic: "fdiv", desc: "Divide" },
    X86InstructionsLookup { mnemomic: "fdiv", desc: "Divide" },
    X86InstructionsLookup { mnemomic: "fdivr", desc: "Reverse Divide" },
    X86InstructionsLookup { mnemomic: "fdivr", desc: "Reverse Divide" },
    X86InstructionsLookup { mnemomic: "fld", desc: "Load Floating Point Value" },
    X86InstructionsLookup { mnemomic: "fxch", desc: "Exchange Register Contents" },
    X86InstructionsLookup { mnemomic: "fxch", desc: "Exchange Register Contents" },
    X86InstructionsLookup { mnemomic: "fst", desc: "Store Floating Point Value" },
    X86InstructionsLookup { mnemomic: "fnop", desc: "No Operation" },
    X86InstructionsLookup { mnemomic: "fstp", desc: "Store Floating Point Value and Pop" },
    X86InstructionsLookup { mnemomic: "fstp1", desc: "Store Floating Point Value and Pop" },
    X86InstructionsLookup { mnemomic: "fldenv", desc: "Load x87 FPU Environment" },
    X86InstructionsLookup { mnemomic: "fchs", desc: "Change Sign" },
    X86InstructionsLookup { mnemomic: "fabs", desc: "Absolute Value" },
    X86InstructionsLookup { mnemomic: "ftst", desc: "Test" },
    X86InstructionsLookup { mnemomic: "fxam", desc: "Examine" },
    X86InstructionsLookup { mnemomic: "fldcw", desc: "Load x87 FPU Control Word" },
    X86InstructionsLookup { mnemomic: "fld1", desc: "Load Constant +1.0" },
    X86InstructionsLookup { mnemomic: "fldl2t", desc: "Load Constant log210" },
    X86InstructionsLookup { mnemomic: "fldl2e", desc: "Load Constant log2e" },
    X86InstructionsLookup { mnemomic: "fldpi", desc: "Load Constant π" },
    X86InstructionsLookup { mnemomic: "fldlg2", desc: "Load Constant log102" },
    X86InstructionsLookup { mnemomic: "fldln2", desc: "Load Constant loge2" },
    X86InstructionsLookup { mnemomic: "fldz", desc: "Load Constant +0.0" },
    X86InstructionsLookup { mnemomic: "fnstenv", desc: "Store x87 FPU Environment" },
    X86InstructionsLookup { mnemomic: "fstenv", desc: "Store x87 FPU Environment" },
    X86InstructionsLookup { mnemomic: "f2xm1", desc: "Compute 2x-1" },
    X86InstructionsLookup { mnemomic: "fyl2x", desc: "Compute y נlog2x and Pop" },
    X86InstructionsLookup { mnemomic: "fptan", desc: "Partial Tangent" },
    X86InstructionsLookup { mnemomic: "fpatan", desc: "Partial Arctangent and Pop" },
    X86InstructionsLookup { mnemomic: "fxtract", desc: "Extract Exponent and Significand" },
    X86InstructionsLookup { mnemomic: "fprem1", desc: "IEEE Partial Remainder" },
    X86InstructionsLookup { mnemomic: "fdecstp", desc: "Decrement Stack-Top Pointer" },
    X86InstructionsLookup { mnemomic: "fincstp", desc: "Increment Stack-Top Pointer" },
    X86InstructionsLookup { mnemomic: "fnstcw", desc: "Store x87 FPU Control Word" },
    X86InstructionsLookup { mnemomic: "fstcw", desc: "Store x87 FPU Control Word" },
    X86InstructionsLookup { mnemomic: "fprem", desc: "Partial Remainder (for compatibility with i8087 and i287)" },
    X86InstructionsLookup { mnemomic: "fyl2xp1", desc: "Compute y נlog2(x+1) and Pop" },
    X86InstructionsLookup { mnemomic: "fsqrt", desc: "Square Root" },
    X86InstructionsLookup { mnemomic: "fsincos", desc: "Sine and Cosine" },
    X86InstructionsLookup { mnemomic: "frndint", desc: "Round to Integer" },
    X86InstructionsLookup { mnemomic: "fscale", desc: "Scale" },
    X86InstructionsLookup { mnemomic: "fsin", desc: "Sine" },
    X86InstructionsLookup { mnemomic: "fcos", desc: "Cosine" },
    X86InstructionsLookup { mnemomic: "fiadd", desc: "Add" },
    X86InstructionsLookup { mnemomic: "fcmovb", desc: "FP Conditional Move - below (CF=1)" },
    X86InstructionsLookup { mnemomic: "fimul", desc: "Multiply" },
    X86InstructionsLookup { mnemomic: "fcmove", desc: "FP Conditional Move - equal (ZF=1)" },
    X86InstructionsLookup { mnemomic: "ficom", desc: "Compare Integer" },
    X86InstructionsLookup { mnemomic: "fcmovbe", desc: "FP Conditional Move - below or equal (CF=1 or ZF=1)" },
    X86InstructionsLookup { mnemomic: "ficomp", desc: "Compare Integer and Pop" },
    X86InstructionsLookup { mnemomic: "fcmovu", desc: "FP Conditional Move - unordered (PF=1)" },
    X86InstructionsLookup { mnemomic: "fisub", desc: "Subtract" },
    X86InstructionsLookup { mnemomic: "fisubr", desc: "Reverse Subtract" },
    X86InstructionsLookup { mnemomic: "fucompp", desc: "Unordered Compare Floating Point Values and Pop Twice" },
    X86InstructionsLookup { mnemomic: "fidiv", desc: "Divide" },
    X86InstructionsLookup { mnemomic: "fidivr", desc: "Reverse Divide" },
    X86InstructionsLookup { mnemomic: "fild", desc: "Load Integer" },
    X86InstructionsLookup { mnemomic: "fcmovnb", desc: "FP Conditional Move - not below (CF=0)" },
    X86InstructionsLookup { mnemomic: "fisttp", desc: "Store Integer with Truncation and Pop" },
    X86InstructionsLookup { mnemomic: "fcmovne", desc: "FP Conditional Move - not equal (ZF=0)" },
    X86InstructionsLookup { mnemomic: "fist", desc: "Store Integer" },
    X86InstructionsLookup { mnemomic: "fcmovnbe", desc: "FP Conditional Move - below or equal (CF=0 and ZF=0)" },
    X86InstructionsLookup { mnemomic: "fistp", desc: "Store Integer and Pop" },
    X86InstructionsLookup { mnemomic: "fcmovnu", desc: "FP Conditional Move - not unordered (PF=0)" },
    X86InstructionsLookup { mnemomic: "fneni nop", desc: "Treated as Integer NOP" },
    X86InstructionsLookup { mnemomic: "fndisi nop", desc: "Treated as Integer NOP" },
    X86InstructionsLookup { mnemomic: "fnclex", desc: "Clear Exceptions" },
    X86InstructionsLookup { mnemomic: "fclex", desc: "Clear Exceptions" },
    X86InstructionsLookup { mnemomic: "fninit", desc: "Initialize Floating-Point Unit" },
    X86InstructionsLookup { mnemomic: "finit", desc: "Initialize Floating-Point Unit" },
    X86InstructionsLookup { mnemomic: "fnsetpm nop", desc: "Treated as Integer NOP" },
    X86InstructionsLookup { mnemomic: "fld", desc: "Load Floating Point Value" },
    X86InstructionsLookup { mnemomic: "fucomi", desc: "Unordered Compare Floating Point Values and Set EFLAGS" },
    X86InstructionsLookup { mnemomic: "fcomi", desc: "Compare Floating Point Values and Set EFLAGS" },
    X86InstructionsLookup { mnemomic: "fstp", desc: "Store Floating Point Value and Pop" },
    X86InstructionsLookup { mnemomic: "fadd", desc: "Add" },
    X86InstructionsLookup { mnemomic: "fadd", desc: "Add" },
    X86InstructionsLookup { mnemomic: "fmul", desc: "Multiply" },
    X86InstructionsLookup { mnemomic: "fmul", desc: "Multiply" },
    X86InstructionsLookup { mnemomic: "fcom", desc: "Compare Real" },
    X86InstructionsLookup { mnemomic: "fcom2", desc: "Compare Real" },
    X86InstructionsLookup { mnemomic: "fcomp", desc: "Compare Real and Pop" },
    X86InstructionsLookup { mnemomic: "fcomp3", desc: "Compare Real and Pop" },
    X86InstructionsLookup { mnemomic: "fsub", desc: "Subtract" },
    X86InstructionsLookup { mnemomic: "fsubr", desc: "Reverse Subtract" },
    X86InstructionsLookup { mnemomic: "fsubr", desc: "Reverse Subtract" },
    X86InstructionsLookup { mnemomic: "fsub", desc: "Subtract" },
    X86InstructionsLookup { mnemomic: "fdiv", desc: "Divide" },
    X86InstructionsLookup { mnemomic: "fdivr", desc: "Reverse Divide" },
    X86InstructionsLookup { mnemomic: "fdivr", desc: "Reverse Divide" },
    X86InstructionsLookup { mnemomic: "fdiv", desc: "Divide and Pop" },
    X86InstructionsLookup { mnemomic: "fld", desc: "Load Floating Point Value" },
    X86InstructionsLookup { mnemomic: "ffree", desc: "Free Floating-Point Register" },
    X86InstructionsLookup { mnemomic: "fisttp", desc: "Store Integer with Truncation and Pop" },
    X86InstructionsLookup { mnemomic: "fxch4", desc: "Exchange Register Contents" },
    X86InstructionsLookup { mnemomic: "fst", desc: "Store Floating Point Value" },
    X86InstructionsLookup { mnemomic: "fst", desc: "Store Floating Point Value" },
    X86InstructionsLookup { mnemomic: "fstp", desc: "Store Floating Point Value and Pop" },
    X86InstructionsLookup { mnemomic: "fstp", desc: "Store Floating Point Value and Pop" },
    X86InstructionsLookup { mnemomic: "frstor", desc: "Restore x87 FPU State" },
    X86InstructionsLookup { mnemomic: "fucom", desc: "Unordered Compare Floating Point Values" },
    X86InstructionsLookup { mnemomic: "fucom", desc: "Unordered Compare Floating Point Values" },
    X86InstructionsLookup { mnemomic: "fucomp", desc: "Unordered Compare Floating Point Values and Pop" },
    X86InstructionsLookup { mnemomic: "fucomp", desc: "Unordered Compare Floating Point Values and Pop" },
    X86InstructionsLookup { mnemomic: "fnsave", desc: "Store x87 FPU State" },
    X86InstructionsLookup { mnemomic: "fsave", desc: "Store x87 FPU State" },
    X86InstructionsLookup { mnemomic: "fnstsw", desc: "Store x87 FPU Status Word" },
    X86InstructionsLookup { mnemomic: "fstsw", desc: "Store x87 FPU Status Word" },
    X86InstructionsLookup { mnemomic: "fiadd", desc: "Add" },
    X86InstructionsLookup { mnemomic: "faddp", desc: "Add and Pop" },
    X86InstructionsLookup { mnemomic: "faddp", desc: "Add and Pop" },
    X86InstructionsLookup { mnemomic: "fimul", desc: "Multiply" },
    X86InstructionsLookup { mnemomic: "fmulp", desc: "Multiply and Pop" },
    X86InstructionsLookup { mnemomic: "fmulp", desc: "Multiply and Pop" },
    X86InstructionsLookup { mnemomic: "ficom", desc: "Compare Integer" },
    X86InstructionsLookup { mnemomic: "fcomp5", desc: "Compare Real and Pop" },
    X86InstructionsLookup { mnemomic: "ficomp", desc: "Compare Integer and Pop" },
    X86InstructionsLookup { mnemomic: "fcompp", desc: "Compare Real and Pop Twice" },
    X86InstructionsLookup { mnemomic: "fisub", desc: "Subtract" },
    X86InstructionsLookup { mnemomic: "fsubrp", desc: "Reverse Subtract and Pop" },
    X86InstructionsLookup { mnemomic: "fsubrp", desc: "Reverse Subtract and Pop" },
    X86InstructionsLookup { mnemomic: "fisubr", desc: "Reverse Subtract" },
    X86InstructionsLookup { mnemomic: "fsubp", desc: "Subtract and Pop" },
    X86InstructionsLookup { mnemomic: "fsubp", desc: "Subtract and Pop" },
    X86InstructionsLookup { mnemomic: "fidiv", desc: "Divide" },
    X86InstructionsLookup { mnemomic: "fdivrp", desc: "Reverse Divide and Pop" },
    X86InstructionsLookup { mnemomic: "fdivrp", desc: "Reverse Divide and Pop" },
    X86InstructionsLookup { mnemomic: "fidivr", desc: "Reverse Divide" },
    X86InstructionsLookup { mnemomic: "fdivp", desc: "Divide and Pop" },
    X86InstructionsLookup { mnemomic: "fdivp", desc: "Divide and Pop" },
    X86InstructionsLookup { mnemomic: "fild", desc: "Load Integer" },
    X86InstructionsLookup { mnemomic: "ffreep", desc: "Free Floating-Point Register and Pop" },
    X86InstructionsLookup { mnemomic: "fisttp", desc: "Store Integer with Truncation and Pop" },
    X86InstructionsLookup { mnemomic: "fxch7", desc: "Exchange Register Contents" },
    X86InstructionsLookup { mnemomic: "fist", desc: "Store Integer" },
    X86InstructionsLookup { mnemomic: "fstp8", desc: "Store Floating Point Value and Pop" },
    X86InstructionsLookup { mnemomic: "fistp", desc: "Store Integer and Pop" },
    X86InstructionsLookup { mnemomic: "fstp9", desc: "Store Floating Point Value and Pop" },
    X86InstructionsLookup { mnemomic: "fbld", desc: "Load Binary Coded Decimal" },
    X86InstructionsLookup { mnemomic: "fnstsw", desc: "Store x87 FPU Status Word" },
    X86InstructionsLookup { mnemomic: "fstsw", desc: "Store x87 FPU Status Word" },
    X86InstructionsLookup { mnemomic: "fild", desc: "Load Integer" },
    X86InstructionsLookup { mnemomic: "fucomip", desc: "Unordered Compare Floating Point Values and Set EFLAGS and Pop" },
    X86InstructionsLookup { mnemomic: "fbstp", desc: "Store BCD Integer and Pop" },
    X86InstructionsLookup { mnemomic: "fcomip", desc: "Compare Floating Point Values and Set EFLAGS and Pop" },
    X86InstructionsLookup { mnemomic: "fistp", desc: "Store Integer and Pop" },
    X86InstructionsLookup { mnemomic: "loopnz", desc: "Decrement count; Jump short if count!=0 and ZF=0" },
    X86InstructionsLookup { mnemomic: "loopne", desc: "Decrement count; Jump short if count!=0 and ZF=0" },
    X86InstructionsLookup { mnemomic: "loopz", desc: "Decrement count; Jump short if count!=0 and ZF=1" },
    X86InstructionsLookup { mnemomic: "loope", desc: "Decrement count; Jump short if count!=0 and ZF=1" },
    X86InstructionsLookup { mnemomic: "loop", desc: "Decrement count; Jump short if count!=0" },
    X86InstructionsLookup { mnemomic: "jcxz", desc: "Jump short if eCX register is 0" },
    X86InstructionsLookup { mnemomic: "jecxz", desc: "Jump short if eCX register is 0" },
    X86InstructionsLookup { mnemomic: "in", desc: "Input from Port" },
    X86InstructionsLookup { mnemomic: "in", desc: "Input from Port" },
    X86InstructionsLookup { mnemomic: "out", desc: "Output to Port" },
    X86InstructionsLookup { mnemomic: "out", desc: "Output to Port" },
    X86InstructionsLookup { mnemomic: "call", desc: "Call Procedure" },
    X86InstructionsLookup { mnemomic: "jmp", desc: "Jump" },
    X86InstructionsLookup { mnemomic: "jmpf", desc: "Jump" },
    X86InstructionsLookup { mnemomic: "jmp", desc: "Jump" },
    X86InstructionsLookup { mnemomic: "in", desc: "Input from Port" },
    X86InstructionsLookup { mnemomic: "in", desc: "Input from Port" },
    X86InstructionsLookup { mnemomic: "out", desc: "Output to Port" },
    X86InstructionsLookup { mnemomic: "out", desc: "Output to Port" },
    X86InstructionsLookup { mnemomic: "lock", desc: "Assert LOCK# Signal Prefix" },
    X86InstructionsLookup { mnemomic: "", desc: "Undefined and Reserved; Does not Generate #UD" },
    X86InstructionsLookup { mnemomic: "int1", desc: "Call to Interrupt Procedure" },
    X86InstructionsLookup { mnemomic: "icebp", desc: "Call to Interrupt Procedure" },
    X86InstructionsLookup { mnemomic: "repnz", desc: "Repeat String Operation Prefix" },
    X86InstructionsLookup { mnemomic: "repne", desc: "Repeat String Operation Prefix" },
    X86InstructionsLookup { mnemomic: "rep", desc: "Repeat String Operation Prefix" },
    X86InstructionsLookup { mnemomic: "", desc: "Scalar Double-precision Prefix" },
    X86InstructionsLookup { mnemomic: "repz", desc: "Repeat String Operation Prefix" },
    X86InstructionsLookup { mnemomic: "repe", desc: "Repeat String Operation Prefix" },
    X86InstructionsLookup { mnemomic: "rep", desc: "Repeat String Operation Prefix" },
    X86InstructionsLookup { mnemomic: "", desc: "Scalar Single-precision Prefix" },
    X86InstructionsLookup { mnemomic: "hlt", desc: "Halt" },
    X86InstructionsLookup { mnemomic: "cmc", desc: "Complement Carry Flag" },
    X86InstructionsLookup { mnemomic: "test", desc: "Logical Compare" },
    X86InstructionsLookup { mnemomic: "test", desc: "Logical Compare" },
    X86InstructionsLookup { mnemomic: "not", desc: "One's Complement Negation" },
    X86InstructionsLookup { mnemomic: "neg", desc: "Two's Complement Negation" },
    X86InstructionsLookup { mnemomic: "mul", desc: "Unsigned Multiply" },
    X86InstructionsLookup { mnemomic: "imul", desc: "Signed Multiply" },
    X86InstructionsLookup { mnemomic: "div", desc: "Unsigned Divide" },
    X86InstructionsLookup { mnemomic: "idiv", desc: "Signed Divide" },
    X86InstructionsLookup { mnemomic: "test", desc: "Logical Compare" },
    X86InstructionsLookup { mnemomic: "test", desc: "Logical Compare" },
    X86InstructionsLookup { mnemomic: "not", desc: "One's Complement Negation" },
    X86InstructionsLookup { mnemomic: "neg", desc: "Two's Complement Negation" },
    X86InstructionsLookup { mnemomic: "mul", desc: "Unsigned Multiply" },
    X86InstructionsLookup { mnemomic: "imul", desc: "Signed Multiply" },
    X86InstructionsLookup { mnemomic: "div", desc: "Unsigned Divide" },
    X86InstructionsLookup { mnemomic: "idiv", desc: "Signed Divide" },
    X86InstructionsLookup { mnemomic: "clc", desc: "Clear Carry Flag" },
    X86InstructionsLookup { mnemomic: "stc", desc: "Set Carry Flag" },
    X86InstructionsLookup { mnemomic: "cli", desc: "Clear Interrupt Flag" },
    X86InstructionsLookup { mnemomic: "sti", desc: "Set Interrupt Flag" },
    X86InstructionsLookup { mnemomic: "cld", desc: "Clear Direction Flag" },
    X86InstructionsLookup { mnemomic: "std", desc: "Set Direction Flag" },
    X86InstructionsLookup { mnemomic: "inc", desc: "Increment by 1" },
    X86InstructionsLookup { mnemomic: "dec", desc: "Decrement by 1" },
    X86InstructionsLookup { mnemomic: "inc", desc: "Increment by 1" },
    X86InstructionsLookup { mnemomic: "dec", desc: "Decrement by 1" },
    X86InstructionsLookup { mnemomic: "call", desc: "Call Procedure" },
    X86InstructionsLookup { mnemomic: "callf", desc: "Call Procedure" },
    X86InstructionsLookup { mnemomic: "jmp", desc: "Jump" },
    X86InstructionsLookup { mnemomic: "jmpf", desc: "Jump" },
    X86InstructionsLookup { mnemomic: "push", desc: "Push Word, Doubleword or Quadword Onto the Stack" },
];
